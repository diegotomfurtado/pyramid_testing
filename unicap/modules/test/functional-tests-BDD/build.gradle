import org.apache.tools.ant.taskdefs.condition.Os


description = """MEETUP - Functional Test Automation"""

jar.enabled = false

repositories {
    jcenter()
    mavenCentral()
    mavenLocal()
}

dependencies {
	testCompile group: "io.takari.junit", name: "takari-cpsuite", version: "1.2.7"

	compile group: 'info.cukes', name: 'cucumber-java', version: '1.2.5'
	compile group: 'info.cukes', name: 'cucumber-core', version: '1.2.5'
	testCompile group: 'info.cukes', name: 'cucumber-junit', version: '1.2.5'
}

sourceSets {
    functionalTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/functionalTest/java')
        }
        resources.srcDir file('src/functionalTest/resources')
    }
}

configurations {
    functionalTestCompile.extendsFrom testCompile
    functionalTestRuntime.extendsFrom testRuntime
}

// Command to run this task: ./gradlew performTest
task performTest(type: Test) {
    description 'Runs the functional Tests without the BDD flow.'

    testClassesDir = sourceSets.functionalTest.output.classesDir
    classpath = sourceSets.functionalTest.runtimeClasspath
    
    	filter {
		includeTestsMatching "*AllTests"
	}
    
    outputs.upToDateWhen { false }
}

// Command to run this task: ./gradlew performTestClass -PclassToBeTested=<Class Name>
// Example: ./gradlew performTestClass -PclassToBeTested=SampleTest
task performTestClass(type: Test) {
	description 'Run the Specific Functional Tests without the BDD flow.'

	testClassesDir = sourceSets.functionalTest.output.classesDir
	classpath = sourceSets.functionalTest.runtimeClasspath

	scanForTestClasses = false

	if (project.hasProperty('classToBeTested')==false){
	} else {
		includes = ['**/'+project.getProperty('classToBeTested')+'.class']
	}

	outputs.upToDateWhen { false }
}

gradle.taskGraph.whenReady { graph ->
    if (graph.hasTask(build)) {
        performTest.enabled = false
    }
}

task setupPerformTestWithGoogleChrome {
    description 'Create the Functional Tests properties and Chrome Driver, for Functional Test using BDD flow, but only work if run on project root folder.'

	doLast {
		def baseDir =  "${project.hasProperty('liferay.workspace.home.dir') ? project.property('liferay.workspace.home.dir') : 'modules'}"
		def SeleniumPropertyKeysPath = new File( 'modules/test/functional-tests-BDD/SeleniumProperties' )
		def SeleniumPropertyKeysFile = new File( 'modules/test/functional-tests-BDD/SeleniumProperties/SeleniumPropertyKeys.properties' )
		
		println "You should run this task only on your project root folder"
		
		if( !SeleniumPropertyKeysFile.exists() ) {
			println "Create Configuration for use a local SeleniumPropertyKeys.properties"
			SeleniumPropertyKeysPath.mkdirs()
			SeleniumPropertyKeysFile.withWriterAppend { w ->
				w <<  "browser=defaultGC\ntime-out=10\nenvironment=https://trello.com/login\nusername=diegofurtado15\npassword=bolodebacia2019"
			}
		} else {
			println "You already had the local SeleniumPropertyKeys.properties created"
		}
		
		if ( (Os.isFamily(Os.FAMILY_WINDOWS)) && (!new File( baseDir + '/test/functional-tests-BDD/SeleniumProperties/chromedriver.exe').exists()) ) {
			println "Create Configuration for Windows to use the Google Chrome Driver"
			download {
				src 'https://chromedriver.storage.googleapis.com/2.37/chromedriver_win32.zip'
				dest new File(SeleniumPropertyKeysPath, 'chromedriver_win32.zip')
			}

			copy {
				def DriverPath = new File ('/SeleniumProperties/')
				from zipTree('/SeleniumProperties/chromedriver_win32.zip')
				into "SeleniumProperties/"
			}
			delete 'SeleniumProperties/chromedriver_win32.zip'

		} else if ( (Os.isFamily(Os.FAMILY_MAC)) && (!new File( baseDir + '/test/functional-tests-BDD/SeleniumProperties/chromedriver').exists()) ) {
			println "Create Configuration for Mac to use the Google Chrome Driver"
			download {
				src 'https://chromedriver.storage.googleapis.com/2.37/chromedriver_mac64.zip'
				dest new File(SeleniumPropertyKeysPath, 'chromedriver_mac64.zip')
			}
            
			copy {
				def DriverPath = new File ('/SeleniumProperties/')
				from zipTree('SeleniumProperties/chromedriver_mac64.zip')
				into "SeleniumProperties/"
			}
			delete 'SeleniumProperties/chromedriver_mac64.zip'

		} else if ( (Os.isFamily(Os.FAMILY_UNIX)) && (!new File( baseDir + '/test/functional-tests-BDD/SeleniumProperties/chromedriver').exists()) ) {
			println "Create Configuration for Unix to use the Google Chrome Driver"
			download {
				src 'https://chromedriver.storage.googleapis.com/2.37/chromedriver_linux64.zip'
				dest new File(SeleniumPropertyKeysPath, 'chromedriver_linux64.zip')
			}

			copy {
				from zipTree(new File('SeleniumProperties/', 'chromedriver_linux64.zip'))
				into "SeleniumProperties/"
			}
			delete 'SeleniumProperties/chromedriver_linux64.zip'
		  } else {
			println "You already had the local Google Chrome Driver created"
		}
	}
}


task setupPerformTestWithFirefox {
	description 'Create the Functional Tests properties and Firefox, for Functional Test, but only work if run on project root folder.'
	
	doLast {
		def baseDir = "${project.hasProperty('liferay.workspace.home.dir') ? project.property('liferay.workspace.home.dir') : 'modules'}"		
		def SeleniumPropertyKeysPath = new File( 'modules/test/functional-tests-BDD/SeleniumProperties' )		
		def SeleniumPropertyKeysFile = new File( 'modules/test/functional-tests-BDD/SeleniumProperties/SeleniumPropertyKeys.properties' )		
		
		println "You should run this task only on your project root folder"		
		
		if( !SeleniumPropertyKeysFile.exists() ) {			
			println "Create Configuration for use a local SeleniumPropertyKeys.properties"			
			SeleniumPropertyKeysPath.mkdirs()
			SeleniumPropertyKeysFile.withWriterAppend { w ->
				w << "browser=defaultGC\ntime-out=10\nenvironment=https://trello.com/login\nusername=diegofurtado15\npassword=bolodebacia2019"
			}
		} else {
			println "You already had the local SeleniumPropertyKeys.properties created"		
		}
		if ( (Os.isFamily(Os.FAMILY_WINDOWS)) && (!new File( baseDir + '/test/functional-tests-BDD/SeleniumProperties/chromedriver.exe').exists()) ) {
			println "Create Configuration for Windows to use the Google Chrome Driver"			
			download {				
				src 'https://chromedriver.storage.googleapis.com/2.37/chromedriver_win32.zip'				
				dest new File(SeleniumPropertyKeysPath, 'chromedriver_win32.zip')			
			}
			
			copy {				
				def DriverPath = new File ('/SeleniumProperties/')				
				from zipTree('/SeleniumProperties/chromedriver_win32.zip')				
				into "SeleniumProperties/"			
			}			
			delete 'SeleniumProperties/chromedriver_win32.zip'
			
		} else if ( (Os.isFamily(Os.FAMILY_MAC)) && (!new File( baseDir + '/test/functional-tests-BDD/SeleniumProperties/geckodriver').exists()) ) {		
			println "Create Configuration for Mac to use the Geckodriver Driver"			
			download {				
				src 'https://github.com/mozilla/geckodriver/releases/download/v0.25.0/geckodriver-v0.25.0-macos.tar.gz'				
				dest new File(SeleniumPropertyKeysPath, 'geckodriver-v0.25.0-macos.tar.gz')			
			}
			copy{
				def DriverPath = new File ('/SeleniumProperties/')
				from {
					tarTree('SeleniumProperties/geckodriver-v0.25.0-macos.tar.gz')
				}
				into "SeleniumProperties/"
			}
			delete 'SeleniumProperties/geckodriver-v0.25.0-macos.tar.gz'
		}
	}
}

